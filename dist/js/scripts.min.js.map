{"version":3,"sources":["scripts.js","components/image-uploader.js"],"names":["document","addEventListener","event","ImageUploader","_classCallCheck","this","elForm","querySelector","elFileInput","elSubmit","elFileListImage","elFileListSize","state","bindEvents","_this","files","validateInput","classList","add","clearLists","createFileList","errors","Array","from","file","elList","children","forEach","item","_this2","reader","readAsDataURL","onload","image","Image","src","target","result","width","height","createElement","newListItemSize","name","innerHTML","size","toPrecision","concat","appendChild","newListItemImage"],"mappings":"aAAAA,SAASC,iBAAiB,mBAAoB,SAASC,GAA9CD,IAAiBE;uZCApBA,yBACJ,SAAAA,IAAcC,gBAAAC,KAAAF,GACZE,KAAKC,OAASN,SAASO,cAAc,mBACrCF,KAAKG,YAAcH,KAAKC,OAAOC,cAAc,gBAC7CF,KAAKI,SAAWJ,KAAKC,OAAOC,cAAc,wBAC1CF,KAAKK,gBAAkBL,KAAKC,OAAOC,cAAc,0CACjDF,KAAKM,eAAiBN,KAAKC,OAAOC,cAAc,yCAChDF,KAAKO,MAAQ,CAPXT,MAAAA,IAUFE,KAAKQ,uEAGM,IAAAC,EAAAT,KAVXA,KAAKG,OAAAA,iBAAmBF,SAAOC,SAAAA,GAC1BE,EAAAA,MAAWM,MAAKT,QAAOC,GAC5BL,EAAKQ,mBAMNL,KAAAG,YAAAP,iBAAA,SAAA,SAAAC,GAcGY,EAAKF,MAAMG,MAAQD,EAAKN,YAAYO,MAEhCD,EAAKE,kBAdAF,EAAAL,SAAAQ,UAAAC,IAAA,UAEXJ,EAAKR,WAAOL,EAAAA,iBACVa,EAAIK,WAAWJ,EAAXJ,gBAEHG,EAAAM,iBAHHN,EAAAJ,gBAAAO,UAAAC,IAAA,UAQAJ,EAAKN,eAAYP,UAAAA,IAAiB,qDAU9B,IAAAoB,EAAKD,EAsBT,OArBIE,MAAAC,KAAIlB,KAACK,MAAAA,OAAgBO,QAAUC,SAAAA,GAC/BM,EAAKb,KAAAA,SAAL,WACDU,GAAA,MAmBCA,qCAJDI,GAEFH,MANDC,KAAAE,EAAAlB,cAAA,MAAAmB,UAAAC,QAAA,SAAAC,GAQAA,EAAIP,oDAkBW,IAAAQ,EAAAxB,KACfiB,MAAMC,KAAKlB,KAAKO,MAAMG,OAAOY,QAAS,SAAAH,GATtCF,IAAMC,EAAKE,IAAOlB,WAEjBuB,EAFDC,cAAAP,GAGDM,EAAAE,OAAA,SAAA9B,GAED,IAAA+B,EAAA,IAAAC,MAcMD,EAAME,IAAMjC,EAAMkC,OAAOC,OAEzBJ,EAAMD,OAAS,WACbR,EAAKc,MAAQL,EAAMK,MAdVd,EAAAe,OAAAN,EAAAM,OACfjB,IAAMC,EAANvB,SAAAwC,cAAsChB,MAEpCiB,EAAAzC,SAAAwC,cAAA,MAGAV,EAAOC,UAAPP,EAAAkB,KAeID,EAAgBE,WAAanB,EAAKoB,KAAO,MAAMC,YAAY,GAA/B,uCAAAC,OAA2EtB,EAAKc,MAAhF,SAAAQ,OAA6FtB,EAAKe,OAAlG,aAb9BV,EAAMI,gBAAQ1B,cAEd,MAAAwC,YAAAC,GAcEnB,EAAKlB,eAAeJ,cAAc,MAAMwC,YAAYN","file":"scripts.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function(event) {\r\n\r\n  const imageUploader = new ImageUploader();\r\n\r\n});\r\n","class ImageUploader {\r\n  constructor() {\r\n    this.elForm = document.querySelector('#image-uploader');\r\n    this.elFileInput = this.elForm.querySelector('#file_upload');\r\n    this.elSubmit = this.elForm.querySelector('input[type=\"submit\"]');\r\n    this.elFileListImage = this.elForm.querySelector('.image-uploader__list.list--file-image');\r\n    this.elFileListSize = this.elForm.querySelector('.image-uploader__list.list--file-size');\r\n    this.state = {\r\n      files: []\r\n    }\r\n    this.bindEvents();\r\n  }\r\n\r\n  bindEvents() {\r\n\r\n    this.elForm.addEventListener('submit', (event) => {\r\n      if (this.state.files.length <= 0) {\r\n        event.preventDefault();\r\n      }\r\n     \r\n    });\r\n\r\n    \r\n    this.elFileInput.addEventListener('change', (event) => {\r\n\r\n      this.state.files = this.elFileInput.files;\r\n\r\n      if (this.validateInput()) {\r\n        this.elSubmit.classList.add('active');\r\n\r\n        this.clearLists(this.elFileListImage);\r\n        this.clearLists(this.elFileListSize);\r\n  \r\n        this.createFileList();\r\n        this.elFileListImage.classList.add('active');\r\n        this.elFileListSize.classList.add('active');\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate the type of file being uploaded. Only allow type: image/*.\r\n   */\r\n  validateInput() {\r\n    let errors = 0;\r\n  \r\n    Array.from(this.state.files).forEach( file => {\r\n\r\n      if (!file.type.includes('image')) {\r\n        errors += 1;\r\n      }\r\n\r\n    });\r\n\r\n    if (errors) return false;\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * Clears all list children from the DOM.\r\n   * @param {elList} list \r\n   */\r\n  clearLists(elList) {\r\n    Array.from(elList.querySelector('ul').children).forEach( item => {\r\n      item.remove();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a list item for each file in the FileList & adds it to the image uploader list\r\n   */\r\n  createFileList() {\r\n    Array.from(this.state.files).forEach( file => {\r\n\r\n      // Get the image dimensions\r\n      const reader = new FileReader();\r\n\r\n      reader.readAsDataURL(file);\r\n      reader.onload = (event) => {\r\n        const image = new Image();\r\n\r\n        // Set the Base64 string returned from the FileReader as the images source\r\n        image.src = event.target.result;\r\n\r\n        image.onload = () => {\r\n          file.width = image.width;\r\n          file.height = image.height;\r\n\r\n          let newListItemImage = document.createElement('li');\r\n          let newListItemSize = document.createElement('li');\r\n    \r\n          newListItemImage.innerText = file.name;\r\n          newListItemSize.innerHTML = (file.size / 1024).toPrecision(5) + `<span class=\"byte-size\">kilobytes | ${file.width}px x ${file.height}px</span>`;\r\n    \r\n          this.elFileListImage.querySelector('ul').appendChild(newListItemImage);\r\n          this.elFileListSize.querySelector('ul').appendChild(newListItemSize);\r\n        }\r\n      }\r\n    });\r\n\r\n    \r\n  }\r\n\r\n}"]}